{"version":3,"sources":["app_components/weather.component.jsx","app_components/form.component.jsx","app_components/card.component.jsx","app_components/hour.component.jsx","app_components/forecast.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","margin","font","className","date","city","weatherIcon","description","temp","max","min","minMaxTemp","temp_max","temp_min","error","role","Form","resStatus","undefined","onSubmit","loadweather","type","placeholder","name","autoComplete","Alert","bsStyle","Card","icon","dt","hour","Date","getHours","ampm","returnTime","time","src","alt","main","Math","round","Arrow","text","ArrowLeft","ArrowRight","Hour","hours","hourly","LeftArrow","RightArrow","map","value","weather","dayOfWeek","getDay","Forecast","forecast","trigger","width","height","toUpperCase","day","require","config","process","REACT_APP_API_URL","apiKey","currentDate","d","getDate","month","getMonth","year","getFullYear","App","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getGeoWeather","latitude","longitude","a","fetch","forCall","json","data","setState","current","getWeatherIcon","daily","id","getWeather","e","preventDefault","target","elements","api_call","forecast_call","res","for_res","status","days","list","forIcons","fIcon","length","push","state","country","fIcons","lat","long","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","this","then","position","coords","catch","err","code","PERMISSION_DENIED","console","log","message","icons","rangeId","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cf49425.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst Weather = (props) => {\r\n    return(\r\n        <div margin=\"3rem\" font='white' className='p-4'>\r\n            <div className='cards pt-4'>\r\n                <h1 className='py-4'>{props.date}</h1>\r\n                <h1>{props.city}</h1>\r\n                <h5 className='py-4'>\r\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n                </h5>\r\n                <h4 className='py-3'>{props.description}</h4>\r\n                {props.temp ? <h1 className='py-2'>{props.temp}&deg;F</h1> : <div><ClipLoader/></div>}\r\n                {/*shows the min and max temps*/}\r\n                {minMaxTemp(props.temp_max, props.temp_min)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction minMaxTemp(max,min){\r\n    if(min && max){\r\n        return(\r\n            <h3>\r\n                <span className='px-4'>High: {max}&deg;F</span>\r\n                <span className='px-4'>Low: {min}&deg;F</span>\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\nimport {Alert} from 'react-bootstrap';\r\n\r\nconst Form = (props) => {\r\n  // console.log(props.resStatus)\r\n  if(props.resStatus!==200 && props.resStatus!==undefined){\r\n    return (\r\n      <div className=\"container h-100\">\r\n        <form onSubmit={props.loadweather}>\r\n          <div>{props.error ? error() : \"\"}</div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-3\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter City or Zip Code\"\r\n                name=\"city\"\r\n                autoComplete=\"off\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 mt-md-0 py-2 text-md-left \">\r\n              <button className=\"btn btn-warning\">Get Weather</button>\r\n            </div>\r\n          </div>\r\n          <div className='alert'>\r\n            <Alert bsStyle=\"warning\">\r\n              <strong> Invalid City </strong>\r\n            </Alert>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"container h-100\">\r\n        <form onSubmit={props.loadweather}>\r\n          <div>{props.error ? error() : \"\"}</div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-3\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"City\"\r\n                name=\"city\"\r\n                autoComplete=\"off\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 mt-md-0 py-2 text-md-left \">\r\n              <button className=\"btn btn-warning\">Get Weather</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n  \r\n  const error = (props) => {\r\n    return (\r\n      <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n        Please Enter City and Country...!\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Form;","import React from 'react';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst Card = (props) => {\r\n    let iconUrl = `http://openweathermap.org/img/wn/${props.icon}@2x.png`;\r\n    return(\r\n        (props ? \r\n            <div margin=\"auto\">\r\n                <p>{returnTime(props.time)}</p>\r\n                <img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt={props.main}/>\r\n                <p>{Math.round(props.temp)}&deg;F</p>\r\n            </div>\r\n        :<div>\r\n            <ClipLoader/>\r\n        </div>)\r\n    )\r\n}\r\n\r\n\r\nfunction returnTime(dt){\r\n\tlet date = new Date(dt*1000);\r\n\tlet hour = date.getHours();\r\n\tlet ampm = \"am\";\r\n\r\n\tif(hour>12){\r\n\t\tampm=\"pm\";\r\n\t\thour= hour-12;\r\n\t} else if(hour===0){\r\n\t\thour=12\r\n\t}\r\n\r\n\tvar time = hour + ampm;\r\n\r\n\treturn time;\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './card.component'\r\nimport { ScrollMenu } from \"react-horizontal-scrolling-menu\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nconst Hour = (props) =>{\r\n    let hours=props.hourly\r\n\r\n    return(\r\n        (hours ? \r\n\t\t\t<ScrollMenu LeftArrow={ArrowLeft} RightArrow={ArrowRight}>\r\n\t\t\t{hours.map((value) => {\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<Card \r\n                        time={value.dt}\r\n                        temp={value.temp} \r\n                        icon={value.weather[0].icon}\r\n                        main={value.weather[0].main}\r\n                    />\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t\t</ScrollMenu>\r\n\t\t:<div>\r\n\t\t\t<ClipLoader/>\r\n\t\t</div>)\r\n    )\r\n}\r\n\r\nconst Arrow = ({text}) => {\r\n    return (\r\n        <div>{text}</div>\r\n    )\r\n}\r\n\r\nconst ArrowLeft = Arrow({text:'<'});\r\nconst ArrowRight = Arrow({text: '>'})\r\n\r\nexport default Hour;","import React from 'react';\r\nimport './forecast.style.css';\r\n\r\n/** Dependencies*/\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst Forecast = (props) =>{\r\n\tlet forecast=props.forecast;\r\n\r\n\treturn (\r\n\t\t(forecast ? \r\n\t\t\t<div>\r\n\t\t\t{forecast.map((value) => {\r\n\r\n\t\t\t\tlet iconUrl = `http://openweathermap.org/img/wn/${value.weather[0].icon}.png`;\r\n\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<Collapsible className='Collapsible' trigger={`${dayOfWeek(value.dt)}`} >\r\n\t\t\t\t\t\t<div className='Collapsible_contentInner'>\r\n\t\t\t\t\t\t\t<img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} width=\"125vw\" height=\"125vw\" alt={value.weather[0].main}/>\r\n\t\t\t\t\t\t\t<h5>{value.weather[0].main.toUpperCase()}</h5> \r\n\t\t\t\t\t\t\t<h3>{Math.round(value.temp.day)}&deg;F</h3>\r\n\t\t\t\t\t\t\t{minMaxTemp(value.temp.max, value.temp.min)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Collapsible>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t\t</div>\r\n\t\t:<div>\r\n\t\t\t<ClipLoader/>\r\n\t\t</div>)\r\n\t)\r\n}\r\n\r\nfunction dayOfWeek(dt){\r\n\tlet date = new Date(dt*1000);\r\n\tlet weekDay = date.getDay();\r\n\tlet day=weekDay%7;\r\n\tlet days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n\treturn days[day];\r\n\r\n}\r\n\r\nfunction minMaxTemp(max,min){\r\n    if(max && min){\r\n        return(\r\n\t\t\t<div>\r\n                <h4 width='50%' margin=\"auto\">High: {Math.round(max)}&deg;F</h4>\r\n                <h4 width=\"50%\" margin=\"auto\">Low: {Math.round(min)}&deg;F</h4>\r\n\t\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Forecast;","/**\r\n * Followed this tutorial\r\n * https://www.youtube.com/watch?v=IxuqmfO6p28&t=2s \r\n * */\r\n\r\n\r\n//Components\r\nimport React from 'react';\r\nimport Weather from './app_components/weather.component';\r\nimport Form from './app_components/form.component';\r\nimport Hour from './app_components/hour.component';\r\nimport './App.css';\r\n\r\n/** Dependencies*/\r\nimport \"weather-icons/css/weather-icons.css\"; //git project from https://github.com/erikflowers/weather-icons\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Forecast from './app_components/forecast.component';\r\nrequire('dotenv').config();\r\n\r\nlet envKey = process.env.REACT_APP_API_URL;\r\n\r\n/**\r\n * Here is the api documentation for openweathermap\r\n * https://openweathermap.org/api\r\n */\r\nconst apiKey = {\r\n  key: \"7b7154eb47e573afde1536472685b7fb\",\r\n  base: 'https://api.openweathermap.org/data/2.5/'\r\n}\r\n\r\nconst currentDate=(d)=>{\r\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n  let day = days[d.getDay()];\r\n  let date = d.getDate();\r\n  let month = months[d.getMonth()];\r\n  let year = d.getFullYear();\r\n\r\n  return `${day} ${month} ${date}, ${year}`\r\n}\r\n\r\nclass App extends React.Component{\r\n constructor(){\r\n   super();\r\n   this.state={\r\n     date:undefined,\r\n     city:undefined,\r\n     country:undefined,\r\n     icon:undefined,\r\n     main:undefined,\r\n     temp:0,\r\n     temp_max:0,\r\n     temp_min:0,\r\n     description:\"\",\r\n     error:false,\r\n     forecast:undefined,\r\n     fIcons:undefined,\r\n     lat: 0,\r\n     long: 0,\r\n     daily:\"\",\r\n     hourly:\"\"\r\n   }\r\n   \r\n   this.weatherIcon={\r\n    Thunderstorm: \"wi-thunderstorm\",\r\n    Drizzle: \"wi-sleet\",\r\n    Rain: \"wi-storm-showers\",\r\n    Snow: \"wi-snow\",\r\n    Atmosphere: \"wi-fog\",\r\n    Clear: \"wi-day-sunny\",\r\n    Clouds: \"wi-day-fog\"\r\n   }\r\n }\r\n\r\n componentDidMount(){\r\n   this.getPosition()\r\n   .then((position) => {\r\n     this.getGeoWeather(position.coords.latitude, position.coords.longitude)\r\n  })\r\n  .catch((err) => {\r\n    if(err.code === err.PERMISSION_DENIED){\r\n      //TODO: need to figure out a way for the user to search if they deny geolocation permission\r\n    }\r\n    console.log(err.message);\r\n  })\r\n}\r\n\r\ngetPosition = () => {\r\n  return new Promise(function (resolve, reject){\r\n    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  });\r\n}\r\n\r\ngetGeoWeather = async (latitude,longitude) => {\r\n  const forCall = await fetch(`${apiKey.base}onecall?appid=${apiKey.key}&lat=${latitude}&lon=${longitude}&units=imperial&exclude=minutely`);\r\n  const data = await forCall.json();\r\n\r\n  this.setState({\r\n    date: currentDate(new Date()),\r\n    city: data.name,\r\n    temp: Math.round(data.current.temp),\r\n    icon: this.getWeatherIcon(data.current.weather[0].icon),\r\n    description: data.current.weather[0].description,\r\n    forecast: data.daily,\r\n    hourly:data.hourly,\r\n    resStatus:200\r\n  });\r\n\r\n  this.getWeatherIcon(this.weatherIcon, data.current.weather[0].id);\r\n}\r\n\r\n getWeatherIcon(icons, rangeId){\r\n  switch(true){\r\n    case rangeId >= 200 && rangeId < 232:\r\n        this.setState({ icon: icons.Thunderstorm });\r\n        break;\r\n      case rangeId >= 300 && rangeId <= 321:\r\n        this.setState({ icon: icons.Drizzle });\r\n        break;\r\n      case rangeId >= 500 && rangeId <= 521:\r\n        this.setState({ icon: icons.Rain });\r\n        break;\r\n      case rangeId >= 600 && rangeId <= 622:\r\n        this.setState({ icon: icons.Snow });\r\n        break;\r\n      case rangeId >= 701 && rangeId <= 781:\r\n        this.setState({ icon: icons.Atmosphere });\r\n        break;\r\n      case rangeId === 800:\r\n        this.setState({ icon: icons.Clear });\r\n        break;\r\n      case rangeId >= 801 && rangeId <= 804:\r\n        this.setState({ icon: icons.Clouds });\r\n        break;\r\n      default:\r\n        this.setState({ icon: icons.Clouds });\r\n  }\r\n }\r\n\r\n getWeather = async(e) => {\r\n\r\n  e.preventDefault();\r\n\r\n  const city = e.target.elements.city.value;\r\n  //const country = e.target.elements.country.value;\r\n\r\n  if(city){\r\n    const api_call = await fetch(`${apiKey.base}weather?APPID=${apiKey.key}&q=${city},us&units=imperial`);\r\n    const forecast_call = await fetch(`${apiKey.base}forecast?APPID=${apiKey.key}&q=${city},us&units=imperial&cnt=360`);\r\n    const res = await api_call.json();\r\n    const for_res = await forecast_call.json();\r\n\r\n    if(api_call.status===200){\r\n\r\n      let days=for_res.list;\r\n\r\n      let forIcons=[];\r\n\r\n      for (var fIcon = 0; fIcon < days.length; fIcon++) {\r\n        forIcons.push(days[fIcon].weather[0].icon);\r\n      }\r\n\r\n      this.setState({\r\n        date:currentDate(new Date()),\r\n        city:`${res.name}`,\r\n        temp:Math.round(res.main.temp),\r\n        temp_max:Math.round(res.main.temp_max),\r\n        temp_min:Math.round(res.main.temp_min),\r\n        description:res.weather[0].description,\r\n        icon: this.getWeatherIcon(res.weather[0].icon),\r\n        error:false,\r\n        resStatus:api_call.status\r\n      });\r\n\r\n      this.getWeatherIcon(this.weatherIcon, res.weather[0].id);\r\n\r\n      }else{ \r\n\r\n        this.setState({resStatus: api_call.status})\r\n\r\n      }\r\n\r\n    } else {\r\n      this.setState({error:true})\r\n    }\r\n}\r\n  render(){\r\n    return(\r\n      <div className='App'>\r\n        <h1>React Weather</h1>\r\n        <Form loadweather={this.getWeather} resStatus={this.state.resStatus}/>\r\n        <Weather \r\n        date={this.state.date}\r\n        city={this.state.city}\r\n        temp={this.state.temp}\r\n        temp_max={this.state.temp_max}\r\n        temp_min={this.state.temp_min}\r\n        description={this.state.description}\r\n        weatherIcon={this.state.icon}/>\r\n        <Hour hourly={this.state.hourly}/>\r\n        <Forecast forecast={this.state.forecast} icon={this.weatherIcon}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}